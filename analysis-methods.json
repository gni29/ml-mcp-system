{
  "basic": {
    "descriptive_stats": {
      "script": "python/analyzers/basic/descriptive_stats.py",
      "class": "DescriptiveStats",
      "method": "analyze",
      "description": "기본 통계 분석 (평균, 표준편차, 분위수 등)",
      "output_types": ["statistics", "summary"],
      "required_params": [],
      "optional_params": {
        "columns": "list of column names to analyze",
        "include_percentiles": "boolean, default True",
        "exclude_null": "boolean, default True"
      }
    },
    "correlation": {
      "script": "python/analyzers/basic/correlation.py",
      "class": "CorrelationAnalyzer",
      "method": "analyze",
      "description": "상관관계 분석 (피어슨, 스피어만 등)",
      "output_types": ["correlation_matrix", "correlation_pairs"],
      "required_params": [],
      "optional_params": {
        "method": "pearson|spearman|kendall, default pearson",
        "min_periods": "int, minimum number of observations",
        "threshold": "float, minimum correlation threshold"
      }
    },
    "distribution": {
      "script": "python/analyzers/basic/distribution.py",
      "class": "DistributionAnalyzer",
      "method": "analyze",
      "description": "분포 분석 (정규성 검정, 히스토그램 등)",
      "output_types": ["distribution_stats", "normality_tests"],
      "required_params": [],
      "optional_params": {
        "test_normality": "boolean, default True",
        "bins": "int, number of histogram bins",
        "alpha": "float, significance level for tests"
      }
    }
  },
  "advanced": {
    "pca": {
      "script": "python/analyzers/advanced/pca.py",
      "class": "PCAAnalyzer",
      "method": "analyze",
      "description": "주성분 분석 (차원 축소)",
      "output_types": ["components", "explained_variance", "transformed_data"],
      "required_params": [],
      "optional_params": {
        "n_components": "int or float, number of components",
        "whiten": "boolean, default False",
        "svd_solver": "auto|full|arpack|randomized, default auto"
      }
    },
    "clustering": {
      "script": "python/analyzers/advanced/clustering.py",
      "class": "ClusteringAnalyzer",
      "method": "analyze",
      "description": "클러스터링 분석 (K-means, DBSCAN 등)",
      "output_types": ["cluster_labels", "cluster_centers", "metrics"],
      "required_params": [],
      "optional_params": {
        "algorithm": "kmeans|dbscan|hierarchical, default kmeans",
        "n_clusters": "int, number of clusters for kmeans",
        "eps": "float, epsilon for DBSCAN",
        "min_samples": "int, minimum samples for DBSCAN"
      }
    },
    "outlier_detection": {
      "script": "python/analyzers/advanced/outlier_detection.py",
      "class": "OutlierDetector",
      "method": "detect",
      "description": "이상치 탐지 (IQR, Z-score, Isolation Forest 등)",
      "output_types": ["outlier_indices", "outlier_scores", "clean_data"],
      "required_params": [],
      "optional_params": {
        "method": "iqr|zscore|isolation_forest|lof, default iqr",
        "threshold": "float, threshold for outlier detection",
        "contamination": "float, expected proportion of outliers"
      }
    },
    "feature_engineering": {
      "script": "python/analyzers/advanced/feature_engineering.py",
      "class": "FeatureEngineer",
      "method": "create_features",
      "description": "파생변수 생성 (상호작용, 다항식 등)",
      "output_types": ["new_features", "feature_importance", "engineered_data"],
      "required_params": [],
      "optional_params": {
        "polynomial_degree": "int, degree for polynomial features",
        "interaction_only": "boolean, only interaction features",
        "include_bias": "boolean, include bias column"
      }
    }
  },
  "timeseries": {
    "trend_analysis": {
      "script": "python/analyzers/timeseries/trend_analysis.py",
      "class": "TrendAnalyzer",
      "method": "analyze",
      "description": "시계열 트렌드 분석",
      "output_types": ["trend_components", "trend_statistics"],
      "required_params": ["date_column", "value_column"],
      "optional_params": {
        "method": "linear|polynomial|seasonal_decompose, default linear",
        "period": "int, period for seasonal decomposition"
      }
    },
    "seasonality": {
      "script": "python/analyzers/timeseries/seasonality.py",
      "class": "SeasonalityAnalyzer",
      "method": "analyze",
      "description": "계절성 분석",
      "output_types": ["seasonal_components", "seasonal_patterns"],
      "required_params": ["date_column", "value_column"],
      "optional_params": {
        "model": "additive|multiplicative, default additive",
        "period": "int, seasonal period"
      }
    },
    "forecasting": {
      "script": "python/analyzers/timeseries/forecasting.py",
      "class": "TimeSeriesForecaster",
      "method": "forecast",
      "description": "시계열 예측 (ARIMA, Prophet 등)",
      "output_types": ["forecast_values", "confidence_intervals", "model_metrics"],
      "required_params": ["date_column", "value_column"],
      "optional_params": {
        "method": "arima|prophet|exponential_smoothing, default arima",
        "periods": "int, number of periods to forecast",
        "confidence_level": "float, confidence level for intervals"
      }
    }
  },
  "ml_traditional": {
    "supervised": {
      "regression": {
        "linear": {
          "script": "python/ml/supervised/regression/linear_regression.py",
          "class": "LinearRegressionModel",
          "method": "train_and_evaluate",
          "description": "선형 회귀",
          "output_types": ["model", "predictions", "metrics"],
          "required_params": ["target_column"],
          "optional_params": {
            "fit_intercept": "boolean, default True",
            "normalize": "boolean, default False",
            "test_size": "float, default 0.2"
          }
        },
        "random_forest": {
          "script": "python/ml/supervised/regression/random_forest_regression.py",
          "class": "RandomForestRegressionModel",
          "method": "train_and_evaluate",
          "description": "랜덤 포레스트 회귀",
          "output_types": ["model", "predictions", "metrics", "feature_importance"],
          "required_params": ["target_column"],
          "optional_params": {
            "n_estimators": "int, default 100",
            "max_depth": "int, default None",
            "min_samples_split": "int, default 2",
            "test_size": "float, default 0.2"
          }
        },
        "xgboost": {
          "script": "python/ml/supervised/regression/xgboost_regression.py",
          "class": "XGBoostRegressionModel",
          "method": "train_and_evaluate",
          "description": "XGBoost 회귀",
          "output_types": ["model", "predictions", "metrics", "feature_importance"],
          "required_params": ["target_column"],
          "optional_params": {
            "n_estimators": "int, default 100",
            "max_depth": "int, default 6",
            "learning_rate": "float, default 0.1",
            "test_size": "float, default 0.2"
          }
        }
      },
      "classification": {
        "logistic": {
          "script": "python/ml/supervised/classification/logistic_regression.py",
          "class": "LogisticRegressionModel",
          "method": "train_and_evaluate",
          "description": "로지스틱 회귀",
          "output_types": ["model", "predictions", "metrics", "probabilities"],
          "required_params": ["target_column"],
          "optional_params": {
            "penalty": "l1|l2|elasticnet|none, default l2",
            "C": "float, regularization strength",
            "test_size": "float, default 0.2"
          }
        },
        "random_forest": {
          "script": "python/ml/supervised/classification/random_forest.py",
          "class": "RandomForestClassificationModel",
          "method": "train_and_evaluate",
          "description": "랜덤 포레스트 분류",
          "output_types": ["model", "predictions", "metrics", "feature_importance"],
          "required_params": ["target_column"],
          "optional_params": {
            "n_estimators": "int, default 100",
            "max_depth": "int, default None",
            "min_samples_split": "int, default 2",
            "test_size": "float, default 0.2"
          }
        },
        "xgboost": {
          "script": "python/ml/supervised/classification/xgboost_classifier.py",
          "class": "XGBoostClassificationModel",
          "method": "train_and_evaluate",
          "description": "XGBoost 분류",
          "output_types": ["model", "predictions", "metrics", "feature_importance"],
          "required_params": ["target_column"],
          "optional_params": {
            "n_estimators": "int, default 100",
            "max_depth": "int, default 6",
            "learning_rate": "float, default 0.1",
            "test_size": "float, default 0.2"
          }
        }
      },
      "ensemble": {
        "voting": {
          "script": "python/ml/supervised/ensemble/voting_classifier.py",
          "class": "VotingEnsembleModel",
          "method": "train_and_evaluate",
          "description": "보팅 앙상블",
          "output_types": ["model", "predictions", "metrics", "individual_scores"],
          "required_params": ["target_column"],
          "optional_params": {
            "voting": "hard|soft, default hard",
            "estimators": "list of estimators",
            "test_size": "float, default 0.2"
          }
        },
        "stacking": {
          "script": "python/ml/supervised/ensemble/stacking.py",
          "class": "StackingEnsembleModel",
          "method": "train_and_evaluate",
          "description": "스태킹 앙상블",
          "output_types": ["model", "predictions", "metrics", "base_predictions"],
          "required_params": ["target_column"],
          "optional_params": {
            "base_estimators": "list of base estimators",
            "meta_estimator": "meta learner",
            "cv": "int, cross-validation folds",
            "test_size": "float, default 0.2"
          }
        }
      }
    },
    "unsupervised": {
      "clustering": {
        "kmeans": {
          "script": "python/ml/unsupervised/clustering/clusteringkmeans.py",
          "class": "KMeansClusterer",
          "method": "cluster",
          "description": "K-평균 클러스터링",
          "output_types": ["cluster_labels", "cluster_centers", "metrics"],
          "required_params": [],
          "optional_params": {
            "n_clusters": "int, default 8",
            "init": "k-means++|random, default k-means++",
            "n_init": "int, default 10",
            "max_iter": "int, default 300"
          }
        },
        "dbscan": {
          "script": "python/ml/unsupervised/clustering/clusteringdbscan.py",
          "class": "DBSCANClusterer",
          "method": "cluster",
          "description": "DBSCAN 클러스터링",
          "output_types": ["cluster_labels", "core_samples", "metrics"],
          "required_params": [],
          "optional_params": {
            "eps": "float, default 0.5",
            "min_samples": "int, default 5",
            "metric": "str, default euclidean"
          }
        },
        "hierarchical": {
          "script": "python/ml/unsupervised/clustering/clusteringhierarchical.py",
          "class": "HierarchicalClusterer",
          "method": "cluster",
          "description": "계층적 클러스터링",
          "output_types": ["cluster_labels", "dendrogram", "metrics"],
          "required_params": [],
          "optional_params": {
            "n_clusters": "int, default 2",
            "linkage": "ward|complete|average|single, default ward",
            "affinity": "str, default euclidean"
          }
        }
      },
      "dimensionality_reduction": {
        "pca": {
          "script": "python/ml/unsupervised/dimensionality_reduction/pca.py",
          "class": "PCAReducer",
          "method": "reduce",
          "description": "주성분 분석",
          "output_types": ["transformed_data", "components", "explained_variance"],
          "required_params": [],
          "optional_params": {
            "n_components": "int or float, default None",
            "whiten": "boolean, default False",
            "svd_solver": "auto|full|arpack|randomized, default auto"
          }
        },
        "tsne": {
          "script": "python/ml/unsupervised/dimensionality_reduction/tsne.py",
          "class": "TSNEReducer",
          "method": "reduce",
          "description": "t-SNE 차원 축소",
          "output_types": ["transformed_data", "kl_divergence"],
          "required_params": [],
          "optional_params": {
            "n_components": "int, default 2",
            "perplexity": "float, default 30.0",
            "learning_rate": "float, default 200.0",
            "n_iter": "int, default 1000"
          }
        },
        "umap": {
          "script": "python/ml/unsupervised/dimensionality_reduction/umap.py",
          "class": "UMAPReducer",
          "method": "reduce",
          "description": "UMAP 차원 축소",
          "output_types": ["transformed_data"],
          "required_params": [],
          "optional_params": {
            "n_components": "int, default 2",
            "n_neighbors": "int, default 15",
            "min_dist": "float, default 0.1",
            "metric": "str, default euclidean"
          }
        }
      }
    }
  },
  "visualization": {
    "2d": {
      "scatter": {
        "script": "python/visualization/2d/scatter.py",
        "class": "ScatterPlot",
        "method": "create",
        "description": "2D 산점도",
        "output_types": ["plot_file", "plot_data"],
        "required_params": ["x_column", "y_column"],
        "optional_params": {
          "color_column": "str, column for color coding",
          "size_column": "str, column for size coding",
          "alpha": "float, transparency level",
          "figsize": "tuple, figure size"
        }
      },
      "line": {
        "script": "python/visualization/2d/line.py",
        "class": "LinePlot",
        "method": "create",
        "description": "선 그래프",
        "output_types": ["plot_file", "plot_data"],
        "required_params": ["x_column", "y_column"],
        "optional_params": {
          "multiple_y": "list, multiple y columns",
          "style": "str, line style",
          "marker": "str, marker style",
          "figsize": "tuple, figure size"
        }
      },
      "heatmap": {
        "script": "python/visualization/2d/heatmap.py",
        "class": "HeatmapPlot",
        "method": "create",
        "description": "히트맵",
        "output_types": ["plot_file", "plot_data"],
        "required_params": [],
        "optional_params": {
          "data_type": "correlation|confusion_matrix|custom",
          "annot": "boolean, show annotations",
          "cmap": "str, colormap",
          "figsize": "tuple, figure size"
        }
      }
    },
    "3d": {
      "scatter_3d": {
        "script": "python/visualization/3d/scatter_3d.py",
        "class": "Scatter3DPlot",
        "method": "create",
        "description": "3D 산점도",
        "output_types": ["plot_file", "plot_data"],
        "required_params": ["x_column", "y_column", "z_column"],
        "optional_params": {
          "color_column": "str, column for color coding",
          "size_column": "str, column for size coding",
          "alpha": "float, transparency level",
          "figsize": "tuple, figure size"
        }
      },
      "surface": {
        "script": "python/visualization/3d/surface.py",
        "class": "SurfacePlot",
        "method": "create",
        "description": "3D 표면 그래프",
        "output_types": ["plot_file", "plot_data"],
        "required_params": ["x_column", "y_column", "z_column"],
        "optional_params": {
          "cmap": "str, colormap",
          "alpha": "float, transparency level",
          "figsize": "tuple, figure size"
        }
      }
    },
    "interactive": {
      "plotly": {
        "script": "python/visualization/interactive/plotly_charts.py",
        "class": "PlotlyCharts",
        "method": "create",
        "description": "인터랙티브 Plotly 차트",
        "output_types": ["html_file", "plot_data"],
        "required_params": ["chart_type"],
        "optional_params": {
          "x_column": "str, x-axis column",
          "y_column": "str, y-axis column",
          "color_column": "str, color column",
          "size_column": "str, size column",
          "title": "str, plot title",
          "theme": "str, plotly theme"
        }
      },
      "bokeh": {
        "script": "python/visualization/interactive/bokeh_charts.py",
        "class": "BokehCharts",
        "method": "create",
        "description": "인터랙티브 Bokeh 차트",
        "output_types": ["html_file", "plot_data"],
        "required_params": ["chart_type"],
        "optional_params": {
          "x_column": "str, x-axis column",
          "y_column": "str, y-axis column",
          "color_column": "str, color column",
          "size_column": "str, size column",
          "title": "str, plot title",
          "tools": "str, bokeh tools"
        }
      }
    }
  },
  "metadata": {
    "version": "1.0.0",
    "last_updated": "2024-07-03",
    "supported_file_types": ["csv", "xlsx", "json", "parquet"],
    "supported_data_types": ["tabular", "time_series", "image", "text"],
    "dependencies": {
      "python": ">=3.8",
      "pandas": ">=1.3.0",
      "numpy": ">=1.21.0",
      "scikit-learn": ">=1.0.0",
      "matplotlib": ">=3.5.0",
      "seaborn": ">=0.11.0",
      "plotly": ">=5.0.0",
      "bokeh": ">=2.4.0"
    }
  }
}
